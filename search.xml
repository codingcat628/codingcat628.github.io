<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS知识点总结</title>
    <url>/2020/07/08/CSS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="什么是-CSS"><a href="#什么是-CSS" class="headerlink" title="什么是 CSS?"></a>什么是 CSS?</h1><p>CSS 指层叠样式表 (Cascading Style Sheets)</p>
<a id="more"></a>

<p>样式定义如何显示 HTML 元素<br>样式通常存储在样式表中<br>把样式添加到 HTML 4.0 中，是为了解决内容与表现分离的问题<br>外部样式表可以极大提高工作效率<br>外部样式表通常存储在 CSS 文件中<br>多个样式定义可层叠为一个</p>
<h1 id="id-和-class-选择器"><a href="#id-和-class-选择器" class="headerlink" title="id 和 class 选择器"></a>id 和 class 选择器</h1><p>如果你要在HTML元素中设置CSS样式，你需要在元素中设置”id” 和 “class”选择器。</p>
<h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h2><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p>
<p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p>
<p>以下的样式规则应用于元素属性 id=“para1”:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#para1</span><br><span class="line">&#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><strong>ID属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。</strong></p>
<h2 id="class-选择器"><a href="#class-选择器" class="headerlink" title="class 选择器"></a>class 选择器</h2><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。</p>
<p>class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点”.”号显示：</p>
<p>在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center &#123;text-align:center;&#125;</span><br></pre></td></tr></table></figure>
<p>你也可以指定特定的HTML元素使用class。</p>
<p>在以下实例中, 所有的 p 元素使用 class=“center” 让该元素的文本居中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.center &#123;text-align:center;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Remark 类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。</strong></p>
<h1 id="如何插入样式表"><a href="#如何插入样式表" class="headerlink" title="如何插入样式表"></a>如何插入样式表</h1><p>插入样式表的方法有三种:</p>
<h2 id="外部样式表-External-style-sheet"><a href="#外部样式表-External-style-sheet" class="headerlink" title="外部样式表(External style sheet)"></a>外部样式表(External style sheet)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>
<h2 id="内部样式表-Internal-style-sheet"><a href="#内部样式表-Internal-style-sheet" class="headerlink" title="内部样式表(Internal style sheet)"></a>内部样式表(Internal style sheet)</h2><p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">hr &#123;color:sienna;&#125;</span><br><span class="line">p &#123;margin-left:20px;&#125;</span><br><span class="line">body &#123;background-image:url(&quot;images&#x2F;back40.gif&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>
<h2 id="内联样式-Inline-style"><a href="#内联样式-Inline-style" class="headerlink" title="内联样式(Inline style)"></a>内联样式(Inline style)</h2><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p>
<p>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h2 id="多重样式"><a href="#多重样式" class="headerlink" title="多重样式"></a>多重样式</h2><p>如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。</p>
<p>例如，外部样式表拥有针对 h3 选择器的三个属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h3</span><br><span class="line">&#123;</span><br><span class="line">    color:red;</span><br><span class="line">    text-align:left;</span><br><span class="line">    font-size:8pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而内部样式表拥有针对 h3 选择器的两个属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h3</span><br><span class="line">&#123;</span><br><span class="line">    text-align:right;</span><br><span class="line">    font-size:20pt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color:red;</span><br><span class="line">text-align:right;</span><br><span class="line">font-size:20pt;</span><br></pre></td></tr></table></figure>

<h3 id="多重样式优先级"><a href="#多重样式优先级" class="headerlink" title="多重样式优先级"></a>多重样式优先级</h3><p>样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p>
<p>一般情况下，优先级如下：</p>
<p><strong>(内联样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</strong></p>
<h2 id="多重样式优先级深入概念"><a href="#多重样式优先级深入概念" class="headerlink" title="多重样式优先级深入概念"></a>多重样式优先级深入概念</h2><p>优先级是浏览器是通过判断哪些属性值与元素最相关以决定并应用到该元素上的。优先级仅由选择器组成的匹配规则决定的。</p>
<p>优先级就是分配给指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。</p>
<p>优先级顺序<br>下列是一份优先级逐级增加的选择器列表：</p>
<p>通用选择器（*）</p>
<p>元素(类型)选择器</p>
<p>类选择器</p>
<p>属性选择器</p>
<p>伪类</p>
<p>ID 选择器</p>
<p>内联样式</p>
<p>!important 规则例外</p>
<p>当 !important 规则被应用在一个样式声明中时,该样式声明会覆盖CSS中任何其他的声明, 无论它处在声明列表中的哪里. 尽管如此, !important规则还是与优先级毫无关系.使用 !important 不是一个好习惯，因为它改变了你样式表本来的级联规则，从而使其难以调试。</p>
<p>一些经验法则：</p>
<p>Always 要优化考虑使用样式规则的优先级来解决问题而不是 !important</p>
<p>Only 只在需要覆盖全站或外部 css（例如引用的 ExtJs 或者 YUI ）的特定页面中使用 !important</p>
<p>Never 永远不要在全站范围的 css 上使用 !important</p>
<p>Never 永远不要在你的插件中使用 !important</p>
<p>权重计算：</p>
<ol>
<li>内联样式表的权值最高 1000；</li>
<li>ID 选择器的权值为 100</li>
<li>Class 类选择器的权值为 10</li>
<li>HTML 标签选择器的权值为 1</li>
<li>利用选择器的权值进行计算比较，em 显示蓝色，示例如下：<a href="https://c.runoob.com/codedemo/3048" target="_blank" rel="noopener">https://c.runoob.com/codedemo/3048</a></li>
</ol>
<p>CSS 优先级法则：</p>
<p>A 选择器都有一个权值，权值越大越优先；</p>
<p>B 当权值相等时，后出现的样式表设置要优于先出现的样式表设置；</p>
<p>C 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式；</p>
<p>D 继承的CSS 样式不如后来指定的CSS 样式；</p>
<p>E 在同一组属性设置中标有“!important”规则的优先级最大；示例如下：<a href="https://c.runoob.com/codedemo/3049" target="_blank" rel="noopener">https://c.runoob.com/codedemo/3049</a></p>
<p>结果：在Firefox 下显示为蓝色；在IE 6 下显示为红色；<br>这里引入一张流行的CSS权重关系图：</p>
<h1 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h1><p>CSS 背景属性用于定义HTML元素的背景。</p>
<p>CSS 属性定义背景效果:</p>
<p>background-color</p>
<p>background-image</p>
<p>background-repeat</p>
<p>background-attachment</p>
<p>background-position</p>
<h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><p>background-color 属性定义了元素的背景颜色.</p>
<p>页面的背景颜色使用在body的选择器中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;background-color:#b0c4de;&#125;</span><br></pre></td></tr></table></figure>
<p>CSS中，颜色值通常以以下方式定义:</p>
<p>十六进制 - 如：”#ff0000”</p>
<p>RGB - 如：“rgb(255,0,0)”</p>
<p>颜色名称 - 如：“red”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例</span><br><span class="line">h1 &#123;background-color:#6495ed;&#125;</span><br><span class="line">p &#123;background-color:#e0ffff;&#125;</span><br><span class="line">div &#123;background-color:#b0c4de;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h2><p>background-image 属性描述了元素的背景图像.</p>
<p>默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体.</p>
<p>页面背景图片设置实例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;background-image:url(&#39;paper.gif&#39;);&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525071143924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt="背景图片"></p>
<h2 id="背景图像-水平或垂直平铺"><a href="#背景图像-水平或垂直平铺" class="headerlink" title="背景图像 - 水平或垂直平铺"></a>背景图像 - 水平或垂直平铺</h2><p>默认情况下 background-image 属性会在页面的水平或者垂直方向平铺。</p>
<p>一些图像如果在水平方向与垂直方向平铺，这样看起来很不协调，如下所示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">background-image:url(&#39;gradient2.png&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525071356771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt="图片"></p>
<p>如果图像只在水平方向平铺 (repeat-x), 页面背景会更好些:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">background-image:url(&#39;gradient2.png&#39;);</span><br><span class="line">background-repeat:repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200525071306105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt="图片"></p>
<h2 id="背景图像-设置定位与不平铺"><a href="#背景图像-设置定位与不平铺" class="headerlink" title="背景图像- 设置定位与不平铺"></a>背景图像- 设置定位与不平铺</h2><p>Remark 让背景图像不影响文本的排版</p>
<p>如果你不想让图像平铺，你可以使用 background-repeat 属性:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">background-image:url(&#39;img_tree.png&#39;);</span><br><span class="line">background-repeat:no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200525071557482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt="图片"></p>
<p>以上实例中，背景图像与文本显示在同一个位置，为了让页面排版更加合理，不影响文本的阅读，我们可以改变图像的位置。</p>
<p>可以利用 background-position 属性改变图像在背景中的位置:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body</span><br><span class="line">&#123;</span><br><span class="line">background-image:url(&#39;img_tree.png&#39;);</span><br><span class="line">background-repeat:no-repeat;</span><br><span class="line">background-position:right top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525071624896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt="图片"></p>
<h1 id="CSS-文本格式"><a href="#CSS-文本格式" class="headerlink" title="CSS 文本格式"></a>CSS 文本格式</h1><h2 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h2><p>颜色属性被用来设置文字的颜色。</p>
<p>颜色是通过CSS最经常的指定：</p>
<p>十六进制值 - 如: ＃FF0000<br>一个RGB值 - 如: RGB(255,0,0)<br>颜色的名称 - 如: red<br>参阅 CSS 颜色值 查看完整的颜色值。</p>
<p>一个网页的背景颜色是指在主体内的选择：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;color:red;&#125;</span><br><span class="line">h1 &#123;color:#00ff00;&#125;</span><br><span class="line">h2 &#123;color:rgb(255,0,0);&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本的对齐方式"><a href="#文本的对齐方式" class="headerlink" title="文本的对齐方式"></a>文本的对齐方式</h2><p>文本排列属性是用来设置文本的水平对齐方式。</p>
<p>文本可居中或对齐到左或右,两端对齐.</p>
<p>当text-align设置为”justify”，每一行被展开为宽度相等，左，右外边距是对齐（如杂志和报纸）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1 &#123;text-align:center;&#125;</span><br><span class="line">p.date &#123;text-align:right;&#125;</span><br><span class="line">p.main &#123;text-align:justify;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h2><p>text-decoration 属性用来设置或删除文本的装饰。</p>
<p>从设计的角度看 text-decoration属性主要是用来删除链接的下划线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#123;text-decoration:none;&#125;</span><br></pre></td></tr></table></figure>
<p>也可以这样装饰文字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1 &#123;text-decoration:overline;&#125;</span><br><span class="line">h2 &#123;text-decoration:line-through;&#125;</span><br><span class="line">h3 &#123;text-decoration:underline;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525071835808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="文本转换"><a href="#文本转换" class="headerlink" title="文本转换"></a>文本转换</h2><p>文本转换属性是用来指定在一个文本中的大写和小写字母。</p>
<p>可用于所有字句变成大写或小写字母，或每个单词的首字母大写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.uppercase &#123;text-transform:uppercase;&#125;</span><br><span class="line">p.lowercase &#123;text-transform:lowercase;&#125;</span><br><span class="line">p.capitalize &#123;text-transform:capitalize;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h2><p>文本缩进属性是用来指定文本的第一行的缩进。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &#123;text-indent:50px;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525071930343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-字体"><a href="#CSS-字体" class="headerlink" title="CSS 字体"></a>CSS 字体</h1><p>CSS字体属性定义字体，加粗，大小，文字样式。</p>
<h2 id="CSS字型"><a href="#CSS字型" class="headerlink" title="CSS字型"></a>CSS字型</h2><p>在CSS中，有两种类型的字体系列名称：</p>
<p>通用字体系列 - 拥有相似外观的字体系统组合（如 “Serif” 或 “Monospace”）<br>特定字体系列 - 一个特定的字体系列（如 “Times” 或 “Courier”）</p>
<p><img src="https://img-blog.csdnimg.cn/20200525072030807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>字体系列<br>font-family 属性设置文本的字体系列。</p>
<p>font-family 属性应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体。</p>
<p>注意: 如果字体系列的名称超过一个字，它必须用引号，如Font Family：“宋体”。</p>
<p>多个字体系列是用一个逗号分隔指明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p&#123;font-family:&quot;Times New Roman&quot;, Times, serif;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h2><p>主要是用于指定斜体文字的字体样式属性。</p>
<p>这个属性有三个值：</p>
<p>正常 - 正常显示文本<br>斜体 - 以斜体字显示的文字<br>倾斜的文字 - 文字向一边倾斜（和斜体非常类似，但不太支持）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.normal &#123;font-style:normal;&#125;</span><br><span class="line">p.italic &#123;font-style:italic;&#125;</span><br><span class="line">p.oblique &#123;font-style:oblique;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h2><p>font-size 属性设置文本的大小。</p>
<p>能否管理文字的大小，在网页设计中是非常重要的。但是，你不能通过调整字体大小使段落看上去像标题，或者使标题看上去像段落。</p>
<p>请务必使用正确的HTML标签，就</p>
<h3 id=""><a href="#" class="headerlink" title="-"></a>-</h3><h3 id="表示标题和"><a href="#表示标题和" class="headerlink" title="表示标题和"></a>表示标题和</h3><p>表示段落：</p>
<p>字体大小的值可以是绝对或相对的大小。</p>
<p>绝对大小：<br>设置一个指定大小的文本<br>不允许用户在所有浏览器中改变文本大小<br>确定了输出的物理尺寸时绝对大小很有用</p>
<p>相对大小：<br>相对于周围的元素来设置大小<br>允许用户在浏览器中改变文字大小<br>Remark 如果你不指定一个字体的大小，默认大小和普通文本段落一样，是16像素（16px=1em）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1 &#123;font-size:40px;&#125;</span><br><span class="line">h2 &#123;font-size:30px;&#125;</span><br><span class="line">p &#123;font-size:14px;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用em来设置字体大小"><a href="#用em来设置字体大小" class="headerlink" title="用em来设置字体大小"></a>用em来设置字体大小</h2><p>为了避免Internet Explorer 中无法调整文本的问题，许多开发者使用 em 单位代替像素。</p>
<p>em的尺寸单位由W3C建议。</p>
<p>1em和当前字体大小相等。在浏览器中默认的文字大小是16px。</p>
<p>因此，1em的默认大小是16px。可以通过下面这个公式将像素转换为em：px/16=em</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1 &#123;font-size:2.5em;&#125; &#x2F;* 40px&#x2F;16&#x3D;2.5em *&#x2F;</span><br><span class="line">h2 &#123;font-size:1.875em;&#125; &#x2F;* 30px&#x2F;16&#x3D;1.875em *&#x2F;</span><br><span class="line">p &#123;font-size:0.875em;&#125; &#x2F;* 14px&#x2F;16&#x3D;0.875em *&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525072311504.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-链接"><a href="#CSS-链接" class="headerlink" title="CSS 链接"></a>CSS 链接</h1><p>不同的链接可以有不同的样式。</p>
<p>链接的样式，可以用任何CSS属性（如颜色，字体，背景等）。</p>
<p>特别的链接，可以有不同的样式，这取决于他们是什么状态。</p>
<p>这四个链接状态是：</p>
<p>a:link - 正常，未访问过的链接<br>a:visited - 用户已访问过的链接<br>a:hover - 当用户鼠标放在链接上时<br>a:active - 链接被点击的那一刻</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link &#123;color:#000000;&#125;      &#x2F;* 未访问链接*&#x2F;</span><br><span class="line">a:visited &#123;color:#00FF00;&#125;  &#x2F;* 已访问链接 *&#x2F;</span><br><span class="line">a:hover &#123;color:#FF00FF;&#125;  &#x2F;* 鼠标移动到链接上 *&#x2F;</span><br><span class="line">a:active &#123;color:#0000FF;&#125;  &#x2F;* 鼠标点击时 *&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525072425571.png" alt=""></p>
<h1 id="CSS列表属性："><a href="#CSS列表属性：" class="headerlink" title="CSS列表属性："></a>CSS列表属性：</h1><p>设置不同的列表项标记为有序列表<br>设置不同的列表项标记为无序列表<br>设置列表项标记为图像</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在HTML中，有两种类型的列表：</p>
<p>无序列表 - 列表项标记用特殊图形（如小黑点、小方框等）<br>有序列表 - 列表项的标记有数字或字母<br>使用CSS，可以列出进一步的样式，并可用图像作列表项标记。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不同的列表项标记</span><br><span class="line">list-style-type属性指定列表项标记的类型是：</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul.a &#123;list-style-type: circle;&#125;</span><br><span class="line">ul.b &#123;list-style-type: square;&#125;</span><br><span class="line"> </span><br><span class="line">ol.c &#123;list-style-type: upper-roman;&#125;</span><br><span class="line">ol.d &#123;list-style-type: lower-alpha;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200525072630596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="作为列表项标记的图像"><a href="#作为列表项标记的图像" class="headerlink" title="作为列表项标记的图像"></a>作为列表项标记的图像</h2><p>要指定列表项标记的图像，使用列表样式图像属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul</span><br><span class="line">&#123;</span><br><span class="line">    list-style-image: url(&#39;sqpurple.gif&#39;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525072720130.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200525072755984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-表格"><a href="#CSS-表格" class="headerlink" title="CSS 表格"></a>CSS 表格</h1><p>使用 CSS 可以使 HTML 表格更美观。</p>
<h2 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h2><p>指定CSS表格边框，使用border属性。</p>
<p>下面的例子指定了一个表格的Th和TD元素的黑色边框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table, th, td</span><br><span class="line">&#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，在上面的例子中的表格有双边框。这是因为表和th/ td元素有独立的边界。</p>
<p>为了显示一个表的单个边框，使用 border-collapse属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table</span><br><span class="line">&#123;</span><br><span class="line">    border-collapse:collapse;</span><br><span class="line">&#125;</span><br><span class="line">table,th, td</span><br><span class="line">&#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>border-collapse 属性设置表格的边框是否被折叠成一个单一的边框或隔开：<br><img src="https://img-blog.csdnimg.cn/20200525073025876.png" alt=""></p>
<h2 id="表格宽度和高度"><a href="#表格宽度和高度" class="headerlink" title="表格宽度和高度"></a>表格宽度和高度</h2><p>Width和height属性定义表格的宽度和高度。</p>
<p>下面的例子是设置100％的宽度，50像素的th元素的高度的表格：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table </span><br><span class="line">&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br><span class="line">th</span><br><span class="line">&#123;</span><br><span class="line">    height:50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格文字对齐"><a href="#表格文字对齐" class="headerlink" title="表格文字对齐"></a>表格文字对齐</h2><p>表格中的文本对齐和垂直对齐属性。</p>
<p>text-align属性设置水平对齐方式，向左，右，或中心：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">td</span><br><span class="line">&#123;</span><br><span class="line">    height:50px;</span><br><span class="line">    vertical-align:bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="表格填充"><a href="#表格填充" class="headerlink" title="表格填充"></a>表格填充</h2><p>如果在表的内容中控制空格之间的边框，应使用td和th元素的填充属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">td</span><br><span class="line">&#123;</span><br><span class="line">    padding:15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CSS-盒子模型-Box-Model"><a href="#CSS-盒子模型-Box-Model" class="headerlink" title="CSS 盒子模型(Box Model)"></a>CSS 盒子模型(Box Model)</h1><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。</p>
<p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p>
<p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p>
<p>下面的图片说明了盒子模型(Box Model)：<br><img src="https://img-blog.csdnimg.cn/20200525073235846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>在这里插入图片描述<br>Margin(外边距) - 清除边框外的区域，外边距是透明的。</p>
<p>Border(边框) - 围绕在内边距和内容外的边框。</p>
<p>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</p>
<p>Content(内容) - 盒子的内容，显示文本和图像。</p>
<h2 id="元素的宽度和高度"><a href="#元素的宽度和高度" class="headerlink" title="元素的宽度和高度"></a>元素的宽度和高度</h2><p>Remark重要: 当您指定一个 CSS 元素的宽度和高度属性时，你只是设置内容区域的宽度和高度。要知道，完整大小的元素，你还必须添加内边距，边框和边距。</p>
<p>下面的例子中的元素的总宽度为300px：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    border: 25px solid green;</span><br><span class="line">    padding: 25px;</span><br><span class="line">    margin: 25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525073543602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>让我们自己算算：<br>300px (宽)</p>
<ul>
<li>50px (左 + 右填充)<ul>
<li>50px (左 + 右边框)</li>
<li>50px (左 + 右边距)<br>= 450px</li>
</ul>
</li>
</ul>
<p>试想一下，你只有250像素的空间。让我们设置总宽度为250像素的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 220px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    border: 5px solid gray;</span><br><span class="line">    margin: 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>最终元素的总宽度计算公式是这样的：</strong></p>
<p>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距</p>
<p><strong>元素的总高度最终计算公式是这样的：</strong></p>
<p>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距**</p>
<h1 id="CSS-边框属性"><a href="#CSS-边框属性" class="headerlink" title="CSS 边框属性"></a>CSS 边框属性</h1><p>CSS边框属性允许你指定一个元素边框的样式和颜色。</p>
<h2 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h2><p>在这里插入图片描述<br><img src="https://img-blog.csdnimg.cn/20200525073804972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="边框宽度"><a href="#边框宽度" class="headerlink" title="边框宽度"></a>边框宽度</h2><p>您可以通过 border-width 属性为边框指定宽度。</p>
<p>为边框指定宽度有两种方法：可以指定长度值，比如 2px 或 0.1em(单位为 px, pt, cm, em 等)，或者使用 3 个关键字之一，它们分别是 thick 、medium（默认值） 和 thin。</p>
<p>注意：CSS 没有定义 3 个关键字的具体宽度，所以一个用户可能把 thick 、medium 和 thin 分别设置为等于 5px、3px 和 2px，而另一个用户则分别设置为 3px、2px 和 1px。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.one</span><br><span class="line">&#123;</span><br><span class="line">    border-style:solid;</span><br><span class="line">    border-width:5px;</span><br><span class="line">&#125;</span><br><span class="line">p.two</span><br><span class="line">&#123;</span><br><span class="line">    border-style:solid;</span><br><span class="line">    border-width:medium;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="边框-单独设置各边"><a href="#边框-单独设置各边" class="headerlink" title="边框-单独设置各边"></a>边框-单独设置各边</h2><p>在CSS中，可以指定不同的侧面不同的边框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">&#123;</span><br><span class="line">    border-top-style:dotted;</span><br><span class="line">    border-right-style:solid;</span><br><span class="line">    border-bottom-style:dotted;</span><br><span class="line">    border-left-style:solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525073920457.png" alt=""></p>
<p>border-style属性可以有1-4个值：</p>
<p>border-style:dotted solid double dashed;<br>上边框是 dotted<br>右边框是 solid<br>底边框是 double<br>左边框是 dashed</p>
<p>border-style:dotted solid double;<br>上边框是 dotted<br>左、右边框是 solid<br>底边框是 double</p>
<p>border-style:dotted solid;<br>上、底边框是 dotted<br>右、左边框是 solid</p>
<p>border-style:dotted;<br>四面边框是 dotted</p>
<p>边框-简写属性<br>上面的例子用了很多属性来设置边框。</p>
<p>你也可以在一个属性中设置边框。</p>
<p>你可以在”border”属性中设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-width</span><br><span class="line">border-style (required)</span><br><span class="line">border-color</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border:5px solid red;</span><br></pre></td></tr></table></figure>

<h1 id="CSS-轮廓（outline）"><a href="#CSS-轮廓（outline）" class="headerlink" title="CSS 轮廓（outline）"></a>CSS 轮廓（outline）</h1><p><img src="https://img-blog.csdnimg.cn/20200525074048637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200525074113390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-margin-外边距"><a href="#CSS-margin-外边距" class="headerlink" title="CSS margin(外边距)"></a>CSS margin(外边距)</h1><p><img src="https://img-blog.csdnimg.cn/20200525074152523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200525074214274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">margin属性可以有一到四个值。</span><br><span class="line"></span><br><span class="line">margin:25px 50px 75px 100px;</span><br><span class="line">上边距为25px</span><br><span class="line">右边距为50px</span><br><span class="line">下边距为75px</span><br><span class="line">左边距为100px</span><br><span class="line"></span><br><span class="line">margin:25px 50px 75px;</span><br><span class="line">上边距为25px</span><br><span class="line">左右边距为50px</span><br><span class="line">下边距为75px</span><br><span class="line"></span><br><span class="line">margin:25px 50px;</span><br><span class="line">上下边距为25px</span><br><span class="line">左右边距为50px</span><br><span class="line"></span><br><span class="line">margin:25px;</span><br><span class="line">所有的4个边距都是25px</span><br></pre></td></tr></table></figure>
<h1 id="CSS-padding（填充）"><a href="#CSS-padding（填充）" class="headerlink" title="CSS padding（填充）"></a>CSS padding（填充）</h1><p><img src="https://img-blog.csdnimg.cn/20200525074302177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200525074323842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>Padding属性，可以有一到四个值。</p>
<p>padding:25px 50px 75px 100px;</p>
<p>上填充为25px<br>右填充为50px<br>下填充为75px<br>左填充为100px<br>padding:25px 50px 75px;</p>
<p>上填充为25px<br>左右填充为50px<br>下填充为75px<br>padding:25px 50px;</p>
<p>上下填充为25px<br>左右填充为50px<br>padding:25px;</p>
<p>所有的填充都是25px</p>
<h1 id="CSS分组和嵌套-选择器"><a href="#CSS分组和嵌套-选择器" class="headerlink" title="CSS分组和嵌套 选择器"></a>CSS分组和嵌套 选择器</h1><h2 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h2><p>在样式表中有很多具有相同样式的元素。<br>为了尽量减少代码，你可以使用分组选择器。</p>
<p>每个选择器用逗号分隔。</p>
<p>在下面的例子中，我们对以上代码使用分组选择器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1,h2,p</span><br><span class="line">&#123;</span><br><span class="line">    color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h2><p>它可能适用于选择器内部的选择器的样式。</p>
<p>在下面的例子设置了三个样式：</p>
<p>p{ }: 为所有 p 元素指定一个样式。<br>.marked{ }: 为所有 class=“marked” 的元素指定一个样式。<br>.marked p{ }: 为所有 class=“marked” 元素内的 p 元素指定一个样式。<br>p.marked{ }: 为所有 class=“marked” 的 p 元素指定一个样式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p</span><br><span class="line">&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.marked</span><br><span class="line">&#123;</span><br><span class="line">    background-color:red;</span><br><span class="line">&#125;</span><br><span class="line">.marked p</span><br><span class="line">&#123;</span><br><span class="line">    color:white;</span><br><span class="line">&#125;</span><br><span class="line">p.marked&#123;</span><br><span class="line">    text-decoration:underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CSS-尺寸-Dimension"><a href="#CSS-尺寸-Dimension" class="headerlink" title="CSS 尺寸 (Dimension)"></a>CSS 尺寸 (Dimension)</h1><p>CSS 尺寸 (Dimension) 属性允许你控制元素的高度和宽度。同样，它允许你增加行间距。<br><img src="https://img-blog.csdnimg.cn/20200525074518440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-Display-显示-与-Visibility（可见性）"><a href="#CSS-Display-显示-与-Visibility（可见性）" class="headerlink" title="CSS Display(显示) 与 Visibility（可见性）"></a>CSS Display(显示) 与 Visibility（可见性）</h1><p>隐藏元素 - display:none或visibility:hidden<br>隐藏一个元素可以通过把display属性设置为”none”，或把visibility属性设置为”hidden”。但是请注意，这两种方法会产生不同的结果。</p>
<p>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</p>
<p>display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</p>
<h1 id="CSS-Position-定位"><a href="#CSS-Position-定位" class="headerlink" title="CSS Position(定位)"></a>CSS Position(定位)</h1><p>position 属性指定了元素的定位类型。</p>
<p>position 属性的五个值：</p>
<p>static</p>
<p>relative</p>
<p>fixed</p>
<p>absolute</p>
<p>sticky</p>
<p>元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法。<br>static 定位</p>
<p>HTML 元素的默认值，即没有定位，遵循正常的文档流对象。</p>
<p>静态定位的元素不会受到 top, bottom, left, right影响。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div.static &#123;</span><br><span class="line">    position: static;</span><br><span class="line">    border: 3px solid #73AD21;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="fixed-定位"><a href="#fixed-定位" class="headerlink" title="fixed 定位"></a>fixed 定位</h2><p>元素的位置相对于浏览器窗口是固定位置。</p>
<p>即使窗口是滚动的它也不会移动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p.pos_fixed</span><br><span class="line">&#123;</span><br><span class="line">    position:fixed;</span><br><span class="line">    top:30px;</span><br><span class="line">    right:5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="relative-定位"><a href="#relative-定位" class="headerlink" title="relative 定位"></a>relative 定位</h2><p>相对定位元素的定位是相对其正常位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h2.pos_left</span><br><span class="line">&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    left:-20px;</span><br><span class="line">&#125;</span><br><span class="line">h2.pos_right</span><br><span class="line">&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">    left:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>移动相对定位元素，但它原本所占的空间不会改变。</p>
<h2 id="absolute-定位"><a href="#absolute-定位" class="headerlink" title="absolute 定位"></a>absolute 定位</h2><p>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h2</span><br><span class="line">&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="sticky-定位"><a href="#sticky-定位" class="headerlink" title="sticky 定位"></a>sticky 定位</h2><p>sticky 英文字面意思是粘，粘贴，所以可以把它称之为粘性定位。</p>
<p>position: sticky; 基于用户的滚动位置来定位。</p>
<p>粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。</p>
<p>它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。</p>
<p>元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p>
<p>这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>
<p>注意: Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。</p>
<h1 id="CSS-布局-Overflow"><a href="#CSS-布局-Overflow" class="headerlink" title="CSS 布局 - Overflow"></a>CSS 布局 - Overflow</h1><p>CSS overflow 属性用于控制内容溢出元素框时显示的方式。<br>CSS overflow 属性可以控制内容溢出元素框时在对应的元素区间内添加滚动条。</p>
<p>overflow属性有以下值：<br><img src="https://img-blog.csdnimg.cn/20200525075013154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-Float-浮动"><a href="#CSS-Float-浮动" class="headerlink" title="CSS Float(浮动)"></a>CSS Float(浮动)</h1><p>CSS 的 Float（浮动），会使元素向左或向右移动，其周围的元素也会重新排列。</p>
<p>Float（浮动），往往是用于图像，但它在布局时一样非常有用。</p>
<p>元素怎样浮动<br>元素的水平方向浮动，意味着元素只能左右移动而不能上下移动。</p>
<p>一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</p>
<p>浮动元素之后的元素将围绕它。</p>
<p>浮动元素之前的元素将不会受到影响。</p>
<p>如果图像是右浮动，下面的文本流将环绕在它左边：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img</span><br><span class="line">&#123;</span><br><span class="line">    float:right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>彼此相邻的浮动元素<br>如果你把几个浮动的元素放到一起，如果有空间的话，它们将彼此相邻。</p>
<p>在这里，我们对图片廊使用 float 属性：</p>
<p>清除浮动 - 使用 clear<br>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用 clear 属性。</p>
<p>clear 属性指定元素两侧不能出现浮动元素。</p>
<p>使用 clear 属性往文本中添加图片廊：</p>
<p>实例<br><img src="https://img-blog.csdnimg.cn/2020052507521277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-布局-水平-amp-垂直对齐"><a href="#CSS-布局-水平-amp-垂直对齐" class="headerlink" title="CSS 布局 - 水平 &amp; 垂直对齐"></a>CSS 布局 - 水平 &amp; 垂直对齐</h1><h2 id="元素居中对齐"><a href="#元素居中对齐" class="headerlink" title="元素居中对齐"></a>元素居中对齐</h2><p>要水平居中对齐一个元素(如<br>), 可以使用 margin: auto;。</p>
<p>设置到元素的宽度将防止它溢出到容器的边缘。</p>
<p>元素通过指定宽度，并将两边的空外边距平均分配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center &#123;</span><br><span class="line">    margin: auto;</span><br><span class="line">    width: 50%;</span><br><span class="line">    border: 3px solid green;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果没有设置 width 属性(或者设置 100%)，居中对齐将不起作用。</strong></p>
<h2 id="文本居中对齐"><a href="#文本居中对齐" class="headerlink" title="文本居中对齐"></a>文本居中对齐</h2><p>如果仅仅是为了文本在元素内居中对齐，可以使用 text-align: center;</p>
<h2 id="左右对齐-使用定位方式"><a href="#左右对齐-使用定位方式" class="headerlink" title="左右对齐 - 使用定位方式"></a>左右对齐 - 使用定位方式</h2><p>我们可以使用 position: absolute; 属性来对齐元素:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.right &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 0px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    border: 3px solid #73AD21;</span><br><span class="line">    padding: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释：绝对定位元素会被从正常流中删除，并且能够交叠元素。</p>
<p>提示: 当使用 position 来对齐元素时, 通常 元素会设置 margin 和 padding 。 这样可以避免在不同的浏览器中出现可见的差异。</p>
<p>当使用 position 属性时，IE8 以及更早的版本存在一个问题。如果容器元素（在我们的案例中是<br>）设置了指定的宽度，并且省略了 !DOCTYPE 声明，那么 IE8 以及更早的版本会在右侧增加 17px 的外边距。这似乎是为滚动条预留的空间。当使用 position 属性时，请始终设置 !DOCTYPE 声明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.container &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.right &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 0px;</span><br><span class="line">    width: 300px;</span><br><span class="line">    background-color: #b0e0e6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS-组合选择符"><a href="#CSS-组合选择符" class="headerlink" title="CSS 组合选择符"></a>CSS 组合选择符</h1><p>组合选择符说明了两个选择器直接的关系。</p>
<p>CSS组合选择符包括各种简单选择符的组合方式。</p>
<p>在 CSS3 中包含了四种组合方式:</p>
<p>后代选择器(以空格分隔)</p>
<p>子元素选择器(以大于号分隔）</p>
<p>相邻兄弟选择器（以加号分隔）</p>
<p>普通兄弟选择器（以破折号分隔）</p>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器用于选取某元素的后代元素。</p>
<p>以下实例选取所有</p>
<p>元素插入到<br>元素中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div p</span><br><span class="line">&#123;</span><br><span class="line">  background-color:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h2><p>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。</p>
<p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。</p>
<p>以下实例选取了所有位于<br>元素后的第一个</p>
<p>元素:</p>
<p>相邻兄弟选择器<br>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。</p>
<p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。</p>
<p>以下实例选取了所有位于 <div> 元素后的第一个 <p> 元素:</p>
<h2 id="后续兄弟选择器"><a href="#后续兄弟选择器" class="headerlink" title="后续兄弟选择器"></a>后续兄弟选择器</h2><p>后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。</p>
<p>以下实例选取了所有<br>元素之后的所有相邻兄弟元素:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div~p</span><br><span class="line">&#123;</span><br><span class="line">  background-color:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="CSS-伪类-Pseudo-classes"><a href="#CSS-伪类-Pseudo-classes" class="headerlink" title="CSS 伪类(Pseudo-classes)"></a>CSS 伪类(Pseudo-classes)</h2><p>CSS伪类是用来添加一些选择器的特殊效果。</p>
<p>伪类的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector:pseudo-class &#123;property:value;&#125;</span><br></pre></td></tr></table></figure>
<p>CSS类也可以使用伪类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector.class:pseudo-class &#123;property:value;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="anchor伪类"><a href="#anchor伪类" class="headerlink" title="anchor伪类"></a>anchor伪类</h2><p>在支持 CSS 的浏览器中，链接的不同状态都可以以不同的方式显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link &#123;color:#FF0000;&#125; &#x2F;* 未访问的链接 *&#x2F;</span><br><span class="line">a:visited &#123;color:#00FF00;&#125; &#x2F;* 已访问的链接 *&#x2F;</span><br><span class="line">a:hover &#123;color:#FF00FF;&#125; &#x2F;* 鼠标划过链接 *&#x2F;</span><br><span class="line">a:active &#123;color:#0000FF;&#125; &#x2F;* 已选中的链接 *&#x2F;</span><br></pre></td></tr></table></figure>

<p>**注意： 在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p>
<p>注意： 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。**</p>
<h2 id="CSS-first-child-伪类"><a href="#CSS-first-child-伪类" class="headerlink" title="CSS :first-child 伪类"></a>CSS :first-child 伪类</h2><p>匹配第一个元素<br>在下面的例子中，选择器匹配作为任何元素的第一个子元素的</p>
<p>元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p:first-child</span><br><span class="line">&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匹配所有元素中的第一个元素<br>在下面的例子中，选择相匹配的所有元素的第一个元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p &gt; i:first-child</span><br><span class="line">&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匹配所有作为第一个子元素的</p>
<p>元素中的所有 元素<br>在下面的例子中，选择器匹配所有作为元素的第一个子元素的元素中的所有元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p:first-child i</span><br><span class="line">&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-lang-伪类"><a href="#CSS-lang-伪类" class="headerlink" title="CSS - :lang 伪类"></a>CSS - :lang 伪类</h2><p>:lang 伪类使你有能力为不同的语言定义特殊的规则</p>
<p>注意：IE8必须声明&lt;!DOCTYPE&gt;才能支持;lang伪类。</p>
<p>在下面的例子中，:lang 类为属性值为 no 的q元素定义引号的类型：</p>
<p>q:lang(no) {quotes: “<del>” “</del>”;}<br><img src="https://img-blog.csdnimg.cn/20200525084122477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200525084137168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="CSS-伪元素"><a href="#CSS-伪元素" class="headerlink" title="CSS 伪元素"></a>CSS 伪元素</h1><p>伪元素的语法：</p>
<p>selector:pseudo-element {property:value;}<br>CSS类也可以使用伪元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selector.class:pseudo-element &#123;property:value;&#125;</span><br></pre></td></tr></table></figure>
<p>##:first-line 伪元素</p>
<p>“first-line” 伪元素用于向文本的首行设置特殊样式。</p>
<p>在下面的例子中，浏览器会根据 “first-line” 伪元素中的样式对 p 元素的第一行文本进行格式化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p:first-line </span><br><span class="line">&#123;</span><br><span class="line">    color:#ff0000;</span><br><span class="line">    font-variant:small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：“first-line” 伪元素只能用于块级元素。</p>
<p>注意： 下面的属性可应用于 “first-line” 伪元素：<br>font properties</p>
<p>color properties</p>
<p>background properties</p>
<p>word-spacing</p>
<p>letter-spacing</p>
<p>text-decoration</p>
<p>vertical-align</p>
<p>text-transform</p>
<p>line-heig</p>
<h2 id="first-letter-伪元素"><a href="#first-letter-伪元素" class="headerlink" title=":first-letter 伪元素"></a>:first-letter 伪元素</h2><p>“first-letter” 伪元素用于向文本的首字母设置特殊样式：</p>
<p>注意： “first-letter” 伪元素只能用于块级元素。</p>
<p>注意： 下面的属性可应用于 “first-letter” 伪元素：</p>
<p>font properties</p>
<p>color properties</p>
<p>background properties</p>
<p>margin properties</p>
<p>padding properties</p>
<p>border properties</p>
<p>text-decoration</p>
<p>vertical-align (only if “float” is “none”)</p>
<p>text-transform</p>
<p>line-height</p>
<p>float</p>
<p>clear</p>
<h2 id="CSS-before-伪元素"><a href="#CSS-before-伪元素" class="headerlink" title="CSS - :before 伪元素"></a>CSS - :before 伪元素</h2><p>“:before” 伪元素可以在元素的内容前面插入新内容。</p>
<p>下面的例子在每个</p>
<h1 id="元素前面插入一幅图片："><a href="#元素前面插入一幅图片：" class="headerlink" title="元素前面插入一幅图片："></a>元素前面插入一幅图片：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1:before </span><br><span class="line">&#123;</span><br><span class="line">    content:url(smiley.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-after-伪元素"><a href="#CSS-after-伪元素" class="headerlink" title="CSS - :after 伪元素"></a>CSS - :after 伪元素</h2><p>“:after” 伪元素可以在元素的内容之后插入新内容。</p>
<p>下面的例子在每个</p>
<h1 id="元素后面插入一幅图片："><a href="#元素后面插入一幅图片：" class="headerlink" title="元素后面插入一幅图片："></a>元素后面插入一幅图片：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1:after</span><br><span class="line">&#123;</span><br><span class="line">    content:url(smiley.gif);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200525084427863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MjEwNQ==,size_16,color_FFFFFF,t_70" alt=""></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB前端工程师常去的15个技术网站</title>
    <url>/2020/07/06/WEB%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B8%B8%E5%8E%BB%E7%9A%8415%E4%B8%AA%E6%8A%80%E6%9C%AF%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h1 id="1、CSDN"><a href="#1、CSDN" class="headerlink" title="1、CSDN"></a>1、CSDN</h1><p>网址：<a href="https://www.csdn.net/" target="_blank" rel="noopener">https://www.csdn.net/</a></p>
<a id="more"></a>

<p>简介：</p>
<p>CSDN (Chinese Software Developer Network) 创立于1999年，是中国最大的IT社区和服务平台，为中国的软件开发者和IT从业者提供知识传播、职业发展、软件开发等全生命周期服务，满足他们在职业发展中学习及共享知识和信息、建立职业发展社交圈、通过软件开发实现技术商业化等刚性需求。</p>
<h1 id="2、GitHub"><a href="#2、GitHub" class="headerlink" title="2、GitHub"></a>2、GitHub</h1><p>网址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p>
<p>简介：</p>
<p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</p>
<p>gitHub于2008年4月10日正式上线，除了git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。</p>
<p>目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 Ruby on Rails、jQuery、python 等。</p>
<h1 id="3、知乎"><a href="#3、知乎" class="headerlink" title="3、知乎"></a>3、知乎</h1><p>网址：<a href="https://www.zhihu.com/" target="_blank" rel="noopener">https://www.zhihu.com/</a></p>
<p>简介：</p>
<p>知乎是网络问答社区，连接各行各业的用户。用户分享着彼此的知识、经验和见解，为中文互联网源源不断地提供多种多样的信息。</p>
<p>准确地讲，知乎更像一个论坛：用户围绕着某一感兴趣的话题进行相关的讨论，同时可以关注兴趣一致的人。</p>
<p>对于概念性的解释，网络百科几乎涵盖了你所有的疑问；但是对于发散思维的整合，却是知乎的一大特色。</p>
<h1 id="4、jQuery"><a href="#4、jQuery" class="headerlink" title="4、jQuery"></a>4、jQuery</h1><p>网址：<a href="http://jquery.com/" target="_blank" rel="noopener">http://jquery.com/</a></p>
<p>简介：</p>
<p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。</p>
<p>jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p>
<h1 id="5、w3cschool"><a href="#5、w3cschool" class="headerlink" title="5、w3cschool"></a>5、w3cschool</h1><p>网址：<a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p>
<p>简介：</p>
<p>W3Cschool是一个专业的编程入门学习及技术文档查询应用，提供包括HTML，CSS，Javascript，jQuery，C，PHP，Java，Python，Sql，Mysql等编程语言和开源技术的在线教程及使用手册，是类似国外w3schools的学习社区及菜鸟编程平台。</p>
<h1 id="6、Node-js"><a href="#6、Node-js" class="headerlink" title="6、Node.js"></a>6、Node.js</h1><p>网址：<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a></p>
<p>简介：</p>
<p>Node.js是一个Javascript运行环境(runtime)，发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。</p>
<p>V8引擎执行Javascript的速度非常快，性能非常好。Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。</p>
<p>Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p>
<h1 id="7、npm-js"><a href="#7、npm-js" class="headerlink" title="7、npm.js"></a>7、npm.js</h1><p>网址：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a></p>
<p>简介：</p>
<p>npm 是 JavaScript 世界的包管理工具,并且是 Node.js 平台的默认包管理工具。通过 npm 可以安装、共享、分发代码,管理项目依赖关系。</p>
<h1 id="8、vue-js"><a href="#8、vue-js" class="headerlink" title="8、vue.js"></a>8、vue.js</h1><p>网址：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<p>简介：</p>
<p>Vue.js（读音 /vjuː/, 类似于 view）是一个构建数据驱动的 web 界面的渐进式框架。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。它不仅易于上手，还便于与第三方库或既有项目整合。</p>
<p>另一方面，当与单文件组件和 Vue 生态系统支持的库结合使用时，Vue 也完全能够为复杂的单页应用程序提供驱动。</p>
<h1 id="9、segmentfault（思否）"><a href="#9、segmentfault（思否）" class="headerlink" title="9、segmentfault（思否）"></a>9、segmentfault（思否）</h1><p>网址：<a href="https://segmentfault.com/" target="_blank" rel="noopener">https://segmentfault.com/</a></p>
<p>简介：</p>
<p>SegmentFault是中国领先的开发者技术社区。 为编程爱好者提供一个纯粹、高质的技术交流的平台， 与开发者一起学习、交流与成长。</p>
<h1 id="10、Bootstrap"><a href="#10、Bootstrap" class="headerlink" title="10、Bootstrap"></a>10、Bootstrap</h1><p>网址：<a href="http://www.bootcss.com/" target="_blank" rel="noopener">http://www.bootcss.com/</a></p>
<p>简介：</p>
<p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。</p>
<p>Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。</p>
<p>Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。</p>
<p>国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来。</p>
<h1 id="11、博客园"><a href="#11、博客园" class="headerlink" title="11、博客园"></a>11、博客园</h1><p>网址：<a href="https://www.cnblogs.com/" target="_blank" rel="noopener">https://www.cnblogs.com/</a></p>
<p>简介：</p>
<p>博客园是一个面向开发者的知识分享社区。自创建以来，博客园一直致力并专注于为开发者打造一个纯净的技术交流社区，推动并帮助开发者通过互联网分享知识，从而让更多开发者从中受益。</p>
<h1 id="12、菜鸟教程"><a href="#12、菜鸟教程" class="headerlink" title="12、菜鸟教程"></a>12、菜鸟教程</h1><p>网址：<a href="http://www.runoob.com/" target="_blank" rel="noopener">http://www.runoob.com/</a></p>
<p>简介：</p>
<p>菜鸟教程提供了最全的编程技术基础教程, 介绍了HTML、CSS、Javascript、Python，Java，Ruby，C，PHP , MySQL等各种编程语言的基础知识。 </p>
<p>同时本站中也提供了大量的在线实例，通过实例，您可以更好的学习编程。</p>
<h1 id="13、掘金"><a href="#13、掘金" class="headerlink" title="13、掘金"></a>13、掘金</h1><p>网址：<a href="https://juejin.im/" target="_blank" rel="noopener">https://juejin.im/</a></p>
<p>简介：</p>
<p>掘金是一个帮助开发者成长的社区，是给开发者用的 Hacker News，给设计师用的 Designer News，和给产品经理用的 Medium。</p>
<p>掘金的技术文章由稀土上聚集的技术大牛和极客共同编辑为你筛选出最优质的干货，其中包括：Android、iOS、前端、后端等方面的内容。</p>
<h1 id="14、开源中国"><a href="#14、开源中国" class="headerlink" title="14、开源中国"></a>14、开源中国</h1><p>网址：<a href="https://www.oschina.net/" target="_blank" rel="noopener">https://www.oschina.net/</a></p>
<p>简介：</p>
<p>开源中国成立于2008年8月，是目前国内最大的开源技术社区，拥有超过200万会员，形成了由开源软件库、代码分享、资讯、协作翻译、码云、众包、招聘等几大模块内容，为IT开发者提供了一个发现、使用、并交流开源技术的平台。</p>
<h1 id="15、脚本之家"><a href="#15、脚本之家" class="headerlink" title="15、脚本之家"></a>15、脚本之家</h1><p>网址：<a href="http://www.jb51.net/" target="_blank" rel="noopener">http://www.jb51.net/</a></p>
<p>简介：</p>
<p>脚本之家是国内专业的网站建设资源、脚本编程学习类网站,提供asp、php、asp.net、javascript、jquery、vbscript、dos批处理、网页制作、网络编程、网站建设等编程资料。</p>
<p>原作者: CSDN博主「programmer_feng」<br>原文链接：<a href="https://blog.csdn.net/programmer_feng/java/article/details/79792503" target="_blank" rel="noopener">https://blog.csdn.net/programmer_feng/java/article/details/79792503</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习路线总结</title>
    <url>/2020/07/04/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="总结一下我认为学习Java的路线："><a href="#总结一下我认为学习Java的路线：" class="headerlink" title="总结一下我认为学习Java的路线："></a>总结一下我认为学习Java的路线：</h2><a id="more"></a>
<ul>
<li>Java基础–&gt;流程控制–&gt;面向对象(包括Java语法)–&gt;Java集合–&gt;Java IO流–&gt;异常–&gt;多线程–&gt;网络编程–&gt;反射</li>
<li>JavaWeb基础–&gt;HTML/CSS/JavaScript/jQuery–&gt;Tomcat–&gt;XML/注解-&gt;Servlet–&gt;HTTP–&gt;Filter过滤器和监听器–&gt;JSP–&gt;AJAX/JSON–&gt;数据库(MySQL)–&gt;JDBC和DbUtils</li>
<li>项目管理和框架–&gt;Maven–&gt;SpringBoot</li>
<li>Linux基本命令</li>
</ul>
<hr>
<h2 id="我们的项目是这样的："><a href="#我们的项目是这样的：" class="headerlink" title="我们的项目是这样的："></a>我们的项目是这样的：</h2><ul>
<li>以Maven来管理我们的项目</li>
<li>前端通过BootStrap来搭建页面框架</li>
<li>SpringBoot来搭建Java后端环境，SpringMVC处理前端请求(SpringBoot整合了)</li>
<li>DAO层使用DbUtils组件来完成，MySQL作为数据库</li>
</ul>
<hr>
<p>当然了，我的Java路线不一定就是对的，我这里只是给出一种路线。<br>再次说明：这套路线是以“快速”学习Java的，如果你想要找到一份好工作，上面的知识点是不够的！</p>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>利用hexo创建博客并部署到GitHub上</title>
    <url>/2020/07/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="使用hexo框架搭建blog"><a href="#使用hexo框架搭建blog" class="headerlink" title="使用hexo框架搭建blog"></a>使用hexo框架搭建blog</h1><a id="more"></a>


<h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p>（1）Git<br><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p>
<h2 id="参考网址："><a href="#参考网址：" class="headerlink" title="参考网址："></a>参考网址：</h2><p>git安装 <a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html" target="_blank" rel="noopener">https://www.cnblogs.com/ximiaomiao/p/7140456.html</a><br>Git配置<a href="http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html" target="_blank" rel="noopener">http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html</a></p>
<p>（2）Node.js<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<h2 id="安装过程："><a href="#安装过程：" class="headerlink" title="安装过程："></a>安装过程：</h2><p>（1）Node安装<br>按照安装过程依次点击即可，安装过程很简单。<br>（2）安装Git<br>按照网上的安装方式进行安装就可以了<br><a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html" target="_blank" rel="noopener">https://www.cnblogs.com/ximiaomiao/p/7140456.html</a><br>（3）安装Hexo   （下面出现的检测全部是在git中进行的）<br>———————————————————————————————————————</p>
<h2 id="检测node安装是否成功："><a href="#检测node安装是否成功：" class="headerlink" title="检测node安装是否成功："></a>检测node安装是否成功：</h2><p>node -v<br>（返回版本号）<br>npm -v<br>（返回版本号）</p>
<p>———————————————————————————————————————</p>
<h2 id="安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定，不要害怕多试几次就可以了）"><a href="#安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定，不要害怕多试几次就可以了）" class="headerlink" title="安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定，不要害怕多试几次就可以了）"></a>安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定，不要害怕多试几次就可以了）</h2><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>检测<br>cnpm<br>（返回cnpm的信息）<br>cnpm -v<br>（返回cnpm的版本信息）</p>
<h2 id="安装hexo（如果失败重新来过就可以了）"><a href="#安装hexo（如果失败重新来过就可以了）" class="headerlink" title="安装hexo（如果失败重新来过就可以了）"></a>安装hexo（如果失败重新来过就可以了）</h2><p>cnpm install -g hexo-cli<br>检测<br>hexo -v<br>（返回hexo的版本信息）</p>
<p>初始化操作过程：<br>在本地建立blog文件夹<br>进入Git页面<br>pwd   （查询目录所在位置）<br>mkdir Blog   （在目录下建立文件夹Blog）（如果在以后的操作过程中出现问题无法解决就把这个文件夹删掉直接重新来过就可以了）<br>———————————————————————————————————————</p>
<p>cd Blog/   （进入Blog文件夹）<br>pwd    （检测是否进入Blog文件夹）<br>———————————————————————————————————————</p>
<p>hexo init  （即：初始化hexo）</p>
<p>ls -l   （查看初始化获得的文件）</p>
<p>hexo s   （启动hexo）</p>
<p><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>这样就可以在本地4000端口查看自己的网站了</p>
<h1 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h1><p>hexo new ‘文章题目’</p>
<h1 id="进一步深化操作过程1（将网站部署到Github上）"><a href="#进一步深化操作过程1（将网站部署到Github上）" class="headerlink" title="进一步深化操作过程1（将网站部署到Github上）"></a>进一步深化操作过程1（将网站部署到Github上）</h1><p>首先申请一个github账号，然后再github中按照   自己的昵称+.github.io 建立一个仓库（repository）（例：hansonpang99.github.io）</p>
<p>在Blog目录下安装一个hexo部署插件<br>cnpm install –save hexo-deployer-git</p>
<p>找到Blog文件中的   _config.yml  文件，使用编译器打开，建议使用   Visual Studio Code打开<br>注：Visual Studio Code的好处：1.支持的语言种类多，<br>                             2.视图简洁<br>                             3.拥有插件种类多</p>
<p>找到这部分代码，（原始的是没有repo，和branch的，而且type后面也没有东西）<br>对这段代码进行更改<br>type    一个名字，建议写成git方便识别<br>repo    repository仓库地址   将刚刚新建的github仓库地址复制到这里就可以了<br>branch  分支这里设置管理员  master</p>
<p>更改以后进行保存<br>然后再Git里面输入 hexo d     将本地文件部署到github新建的仓库中<br>———————————————————————————————————————</p>
<p>然后通过访问     https://+自己的仓库名   就可以访问部署到github上的blog了<br>（例：<a href="https://hansonpang99.github.io）" target="_blank" rel="noopener">https://hansonpang99.github.io）</a></p>
<h1 id="进一步深化操作过程2（更换Blog的主题）"><a href="#进一步深化操作过程2（更换Blog的主题）" class="headerlink" title="进一步深化操作过程2（更换Blog的主题）"></a>进一步深化操作过程2（更换Blog的主题）</h1><p>这里以  yilia  主题为例进行更换<br>———————————————————————————————————————</p>
<h2 id="首先下载-yilia-主题"><a href="#首先下载-yilia-主题" class="headerlink" title="首先下载  yilia  主题"></a>首先下载  yilia  主题</h2><p>在Git中输入  git clone <a href="http://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">http://github.com/litten/hexo-theme-yilia.git</a>  themes/yilia<br>                                 （克隆地址）               （克隆之后的本地位置）</p>
<p>找到Blog文件中的   _config.yml  文件，使用编译器打开，建议使用   Visual Studio Code打开</p>
<p>找到这部分代码（即theme）<br>将冒号后面的内容改为刚刚新建的yilia<br>———————————————————————————————————————<br>hexo clean            清除数据库之类<br>hexo g               生成静态网站<br>hexo d               将现在的文件部署到github中</p>
<p>这样就实现了主题的更改</p>
<h1 id="进一步深化操作过程3（在建好的博客中添加相册功能）"><a href="#进一步深化操作过程3（在建好的博客中添加相册功能）" class="headerlink" title="进一步深化操作过程3（在建好的博客中添加相册功能）"></a>进一步深化操作过程3（在建好的博客中添加相册功能）</h1><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>安装python<br>下载地址：<a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p>
<p>下载完成后点击安装，安装教程：<br><a href="https://blog.csdn.net/qq_25814003/article/details/80609729" target="_blank" rel="noopener">https://blog.csdn.net/qq_25814003/article/details/80609729</a><br>在安装时选择自定义安装，其他注意事项如图所示</p>
<p>安装成功后，进行检测，进入cmd中输入  python<br>出现下图所示界面，则证明安装成功。</p>
<h2 id="正式操作："><a href="#正式操作：" class="headerlink" title="正式操作："></a>正式操作：</h2><p>1.在github中创建一个新的仓库，命名为BlogBackup。</p>
<p>2.将下面的github仓库中的文件以zip格式下载到本地<br>仓库地址：<a href="https://github.com/lawlite19/Blog-Back-Up" target="_blank" rel="noopener">https://github.com/lawlite19/Blog-Back-Up</a><br>具体操作：</p>
<p>3.下载到本地后，在本地找一个合适的位置进行解压。<br>解压结果</p>
<p>4.进入解压后的文件中，将min_photos和photos两个文件夹中的照片全部删除，并将自己要上传的照片放到photos文件夹中，照片的命名规则为：2015-05-01_XXX.jpg   （jpg可更改为其他图片格式）</p>
<p>5.在解压后的文件中，使用Visaul Studio Code打开tool.py文件，并将文件中的地址改成自己的博客文件夹中的data.json地址。</p>
<p>6.在解压后的文件中，右击鼠标，点击git bash here（出现该操作的前提是已安装git）</p>
<p>7.将该文件提交到自己刚刚新建的github库（BlogBackup）中<br>具体操作：<br>在打开的Git页面中，<br>（1）输入 git init   （把public文件夹转成一个git仓库）<br>git add . （git add -A） （把该文件夹中所有的东西加载到本地仓库里）<br>git commit -m “test”    （提交信息）<br>git  remote add photo <a href="mailto:git@github.com">git@github.com</a>:hansonpang99/BlogBackup.git<br>（加粗部分对应你的仓库地址，如图所示）<br>git push photo master  （将文件提交到github仓库）<br>8.进入到你的博客目录下使用Git执行 hexo new page “photos”,就会出现一个这样的新目录</p>
<p>9.配置 Yilia 主题让其显示出来.在Blog/themes/yilia/_config.yml文件中这样设置</p>
<p>10.将样式文件放到photos文件夹下<br>样式文件地址：<br><a href="https://github.com/lawlite19/Blog-Back-Up/tree/master/blog_photos_copy" target="_blank" rel="noopener">https://github.com/lawlite19/Blog-Back-Up/tree/master/blog_photos_copy</a>  </p>
<p>修改样式文件中的ins.js文件，主要是里面的render函数<br>其中的url对应到你的github放图片的地址（即第1步创建的仓库地址）</p>
<p>11.进入图片文件夹中（即下载的Blog-Back-Up-master文件夹中）使用tool.py脚本处理图片<br>在Blog-Back-Up-master文件夹中打开Git页面中，输入  python tool.py  处理图片</p>
<p>12.在本地的博客目录下，打开git<br>输入 hexo clean<br>     hexo g<br>     hexo s   （在本地检测是否成功，成功后执行下一步，否则解决问题）<br>     hexo d    （将文件部署到github）</p>
<p>13．以后每次在photos中添加图片后，重复11,12步就可以完成部署到github了。</p>
<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p>进一步深化操作过程4（添加背景音乐 （网易云音乐））<br>1.打开网易云音乐首页，复制选择的背景音乐分享外链<br><a href="https://music.163.com/" target="_blank" rel="noopener">https://music.163.com/</a>    在网易云网页中选中想要使用的音乐，进入播放界面，<br>点击   “生成外链播放器”</p>
<p>（注：有版权的歌曲不能生成外链）<br>复制生成的代码</p>
<p>2、引入播放器代码<br>在themes/yilia/layout/_partial/left-col.ejs文件nav标签中添加如下代码<br>将代码中的红色部分和刚刚复制的网易云外链代码进行对照，将对应部分进行替换（不替换的话使用的是 纸短情长 歌曲）</p>
<!-- 网易云音乐插件 -->
<p>&lt;% if (theme.music &amp;&amp; theme.music.enable){ %&gt;<br>    <div style="position:absolute; bottom:120px left:auto; width:85%"><br>        <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="240" height="52" src="//music.163.com/outchain/player?type=2&id=<%=theme.music.id||1334445174%>&auto=<%=theme.music.autoplay?1:0%>&height=32"></iframe><br>    </div><br>&lt;% } %&gt;</p>
<p>3、在yilia主题配置文件中添加属性</p>
<h1 id="网易云音乐插件"><a href="#网易云音乐插件" class="headerlink" title="网易云音乐插件"></a>网易云音乐插件</h1><p>music:<br>  enable: true<br>  #id: 1332647902  # 网易云分享的ID<br>  autoplay: true  # 是否开启自动播放<br>（注：在科学上网条件下，无法自动播放）<br>参考网址：<br><a href="https://zhousiwei.gitee.io/2019/05/09/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90(%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90)/" target="_blank" rel="noopener">https://zhousiwei.gitee.io/2019/05/09/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90(%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90)/</a><br>进一步深化操作过程5（添加helper-live2d动态模型）<br>参考网址：<br><a href="https://zhousiwei.gitee.io/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">https://zhousiwei.gitee.io/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/</a></p>
<p>进行完这一步就可以在hexo博客中看到了</p>
<p>这里是默认的设置，如果想要安装自己喜欢的就继续网站教程<br>其他板娘模板介绍：<br><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a><br>挑选一个喜欢的板娘然后按照教程进行安装。</p>
<p>注：下面这个主题需要是Darwin系统</p>
<p>只执行参考网址的第一步也可以实现，保持默认就可以了，我就是这样。</p>
<p>视频中使用到的网址：</p>
<p>Hexo yilia 主题一揽子使用方案<br><a href="https://cloudy-liu.github.io/2018/04/07/Hexo_yilia_%E4%B8%BB%E9%A2%98%E4%B8%80%E6%8F%BD%E5%AD%90%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%8C%E6%8F%90%E7%A4%BA%E7%BC%BA%E5%A4%B1%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">https://cloudy-liu.github.io/2018/04/07/Hexo_yilia_%E4%B8%BB%E9%A2%98%E4%B8%80%E6%8F%BD%E5%AD%90%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%EF%BC%8C%E6%8F%90%E7%A4%BA%E7%BC%BA%E5%A4%B1%E6%A8%A1%E5%9D%97</a></p>
<p>Hexo博客yilia主题添加背景音乐 （网易云音乐）<br><a href="https://joeybling.github.io/2019/05/09/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90(%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90)/" target="_blank" rel="noopener">https://joeybling.github.io/2019/05/09/Hexo%E5%8D%9A%E5%AE%A2yilia%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90(%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90)/</a></p>
<!-- more -->
<p>Hexo Yilia 高级配置<br><a href="http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/#1%E3%80%81%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%BC%82%E5%B8%B8" target="_blank" rel="noopener">http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/#1%E3%80%81%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%BC%82%E5%B8%B8</a></p>
<p>Hexo博客添加helper-live2d动态模型插件<br><a href="https://zhousiwei.gitee.io/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">https://zhousiwei.gitee.io/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/</a></p>
<p>Hexo添加Live2D看板娘+模型预览<br><a href="http://element-ui.cn/news_show_22203.shtml" target="_blank" rel="noopener">http://element-ui.cn/news_show_22203.shtml</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
